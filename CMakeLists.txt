cmake_minimum_required(VERSION 3.16)
project(uLayFS)
set(CMAKE_CXX_STANDARD 20)
include(FetchContent)

add_library(ulayfs SHARED
    src/alloc.h src/alloc.cpp
    src/bitmap.h
    src/block.h
    src/btable.h src/btable.cpp
    src/const.h
    src/debug.h src/debug.cpp
    src/entry.h
    src/file.h src/file.cpp
    src/flock.h
    src/gc.h
    src/idx.h
    src/lib.h src/lib.cpp
    src/log.h src/log.cpp
    src/mtable.h src/mtable.cpp
    src/offset.h src/offset.cpp
    src/posix.h src/posix.cpp
    src/convert.h
    src/tx.h src/tx.cpp
    src/utils.h src/utils.cpp
    )

#[[
build flags
]]
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native -Wall -Wextra -Wno-unused-function -Wno-unused-private-field")
target_compile_options(ulayfs PRIVATE -Werror)
set_property(TARGET ulayfs PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE) # LTO

#[[
build options
]]

option(ULAYFS_MEM_PROTECT "Enable memory protection to avoid stray writes" OFF)
option(ULAYFS_NO_SHARING "Assume that no two processes concurrently operate on the same file" OFF)
option(ULAYFS_RELAXED "Relax visibility and serialization guarantee on concurrent access" OFF)
option(ULAYFS_USE_MAP_SYNC "Use MAP_SYNC for mmap" ON)
option(ULAYFS_FORCE_MAP_POPULATE "Always use MAP_POPULATE for mmap" ON)
option(ULAYFS_TX_FLUSH_ONLY_FSYNC "Only flush transaction entries in fsync" OFF)
option(ULAYFS_USE_PMEMCHECK "Enable pmemcheck macros" OFF)
option(ULAYFS_USE_LIBPMEM2 "Enable PMDK libpmem2" OFF)

set(ULAYFS_PERSIST "PMDK"
    CACHE STRING "Persist Implementation for memcpy and memset")
set_property(CACHE ULAYFS_PERSIST PROPERTY STRINGS "NATIVE" "KERNEL" "PMDK")

include(cmake/tooling.cmake)

if (${ULAYFS_PERSIST} STREQUAL "PMDK")
    set(ULAYFS_USE_LIBPMEM2 ON)
    include(cmake/libpmem2.cmake)
    target_link_libraries(ulayfs pmem2)
endif ()

configure_file("src/config.h.in" "config.h" @ONLY)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

#[[
dependencies
]]

FetchContent_Declare(tbb URL https://github.com/oneapi-src/oneTBB/releases/download/v2021.5.0/oneapi-tbb-2021.5.0-lin.tgz)
FetchContent_MakeAvailable(tbb)

find_package(TBB REQUIRED HINTS ${tbb_SOURCE_DIR}/lib/cmake/tbb)
target_link_libraries(ulayfs dl pthread atomic TBB::tbb)

#[[
tests, benchmarks, and tools
]]

option(ULAYFS_BUILD_TESTS "Build tests" ON)
option(ULAYFS_BUILD_TOOLS "Build tools" ON)
option(ULAYFS_BUILD_BENCH "Build benchmarks" OFF)

if (ULAYFS_BUILD_TESTS)
    include_directories(src)

    add_executable(test_basic test/test_basic.cpp test/common.h)
    add_executable(test_rw test/test_rw.cpp test/common.h)
    add_executable(test_sync test/test_sync.cpp test/common.h)

    target_link_libraries(test_basic ulayfs)
    target_link_libraries(test_rw ulayfs)
    target_link_libraries(test_sync ulayfs pthread)
endif ()

if (ULAYFS_BUILD_TOOLS)
    add_executable(info tools/info.cpp)
    add_executable(to_ulayfs tools/to_ulayfs.cpp)
    add_executable(from_ulayfs tools/from_ulayfs.cpp)

    target_link_libraries(info ulayfs)
    target_link_libraries(to_ulayfs ulayfs)
    target_link_libraries(from_ulayfs ulayfs)
endif ()

if (ULAYFS_BUILD_BENCH)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

    FetchContent_Declare(
        leveldb
        GIT_REPOSITORY https://github.com/google/leveldb.git
        GIT_TAG e4ccaa0c9cb1a019df3df74eb5db4ec55e9e02ed
        PATCH_COMMAND git apply --reject ${CMAKE_SOURCE_DIR}/bench/leveldb.patch || true
    )
    FetchContent_Declare(cxxopts URL https://github.com/jarro2783/cxxopts/archive/refs/tags/v2.2.0.zip)
    FetchContent_MakeAvailable(leveldb cxxopts)

    add_executable(leveldb_ycsb bench/leveldb_ycsb.cpp)
    add_executable(micro_st bench/micro_st.cpp bench/common.h)
    add_executable(micro_mt bench/micro_mt.cpp bench/common.h)
    add_executable(micro_meta bench/micro_meta.cpp bench/common.h)

    add_executable(tpcc_load bench/tpcc_sqlite/load.c bench/tpcc_sqlite/support.c)
    add_executable(
        tpcc_start
        bench/tpcc_sqlite/main.c
        bench/tpcc_sqlite/spt_proc.c
        bench/tpcc_sqlite/driver.c
        bench/tpcc_sqlite/support.c
        bench/tpcc_sqlite/sequence.c
        bench/tpcc_sqlite/rthist.c
        bench/tpcc_sqlite/sb_percentile.c
        bench/tpcc_sqlite/neword.c
        bench/tpcc_sqlite/payment.c
        bench/tpcc_sqlite/ordstat.c
        bench/tpcc_sqlite/delivery.c
        bench/tpcc_sqlite/slev.c
    )

    target_link_libraries(leveldb_ycsb cxxopts leveldb)
    target_link_libraries(micro_st benchmark::benchmark)
    target_link_libraries(micro_mt benchmark::benchmark)
    target_link_libraries(micro_meta benchmark::benchmark)
    target_link_libraries(tpcc_load sqlite3)
    target_link_libraries(tpcc_start sqlite3 m pthread)
endif ()
