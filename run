#!/usr/bin/env python3

import argparse
import logging
from pathlib import Path

from scripts.bench_common import get_ext4_dax_path
from scripts.runner import Runner, build_types
from scripts.utils import check_any_args_passed

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("run")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Build and run tests or benchmarks")
    parser.add_argument(
        "cmake_target",
        help="see .cpp files in `test` and `bench` for available targets",
    )
    parser.add_argument(
        "build_type",
        nargs=argparse.OPTIONAL,
        choices=build_types,
    )
    parser.add_argument(
        "-c",
        "--cmake_args",
        default="",
        help="additional build arguments to be passed to CMake",
    )
    parser.add_argument(
        "-p",
        "--prog_args",
        default="",
        help="arguments to be passed to the program during execution",
    )
    parser.add_argument(
        "-d",
        "--disable_ulayfs",
        action="store_true",
        default=False,
        help="do not load the ulayfs shared library",
    )
    parser.add_argument(
        "--pmem_path",
        type=Path,
        help="Path to the pmem device",
    )
    parser.add_argument("--numa", type=int, default=0, help="numa node to run on")
    check_any_args_passed(parser)
    args = parser.parse_args()

    if args.pmem_path is None:
        args.pmem_path = get_ext4_dax_path()

    logger.info(f"args={args}")

    runner = Runner(name=args.cmake_target, build_type=args.build_type)
    runner.build(cmake_args=args.cmake_args)
    runner.run(
        additional_args=args.prog_args,
        load_ulayfs=not args.disable_ulayfs,
        numa=args.numa,
        pmem_path=args.pmem_path,
    )
