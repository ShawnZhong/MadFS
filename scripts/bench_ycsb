#!/usr/bin/env python3
import argparse
import logging
from pathlib import Path

from bench_common import drop_cache, add_common_args
from plot import plot_ycsb
from utils import system, root_dir, get_timestamp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bench_ycsb")


def run_workload(runner, fs, dbdir: Path, workload: str, load):
    drop_cache()
    trace_name = f"{workload}-{'load' if load else 'run'}"
    trace_path = root_dir / "bench" / "ycsb-traces-large" / f"{trace_name}.txt"
    cmd = f"{runner.prog_path} -f {trace_path} -d {dbdir}"
    runner.run(cmd=cmd, load_ulayfs=fs.load_ulayfs, prog_log_name=f"{trace_name}.log")


def run_ycsb(workloads, build_type, fs_names):
    from bench_common import get_fs_configs
    from runner import Runner
    from init import init

    init(configure=True)

    result_dir = root_dir / "results" / "bench_ycsb" / get_timestamp()

    for fs in get_fs_configs(fs_names):
        runner = Runner("leveldb_ycsb", result_dir=result_dir / fs.name, build_type=build_type)
        runner.build()

        dbdir = fs.pmem_path / "bench-dbdir"
        for workload in workloads:
            system(f"rm -rf {dbdir} && mkdir -p {dbdir}")
            run_workload(runner, fs, dbdir=dbdir, workload=workload, load=True)
            run_workload(runner, fs, dbdir=dbdir, workload=workload, load=False)
            system(f"rm -rf {dbdir}")

    return result_dir


def main(result_dir, **kwargs):
    if result_dir is None:
        result_dir = run_ycsb(**kwargs)

    plot_ycsb(result_dir)
    logger.info(f"Results saved to {result_dir}")


if __name__ == "__main__":
    all_workloads = ("a", "b", "c", "d", "e", "f")

    argparser = argparse.ArgumentParser()
    add_common_args(argparser)
    argparser.add_argument(
        "-w",
        "--workloads",
        type=str,
        nargs="+",
        default=all_workloads,
        choices=all_workloads,
    )
    args = argparser.parse_args()
    main(**vars(args))
