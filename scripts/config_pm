#!/usr/bin/env python3

import argparse
import logging

from utils import system, check_any_args_passed

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("format_pm")


def main(region, reformat_ns, mount_ext4, mount_nova, unmount):
    if reformat_ns:
        system("ndctl list -Nui")
        system(f"sudo ndctl destroy-namespace all --region=region{region} --force")
        for i in range(0, 4):
            system(
                f"sudo ndctl create-namespace "
                f"--region=region{region} "
                f"--type=pmem "
                f"--mode=fsdax "
                f"--size=20G "
                f"--align=2M"
            )
        system("ndctl list -N")
        system(f"ls /dev/pmem{region}*")
    if mount_ext4:
        system(f"sudo mkfs.ext4 /dev/pmem{region}")
        system(f"sudo mkdir -p /mnt/pmem{region}-ext4-dax")
        system(f"sudo mount -o dax /dev/pmem0   /mnt/pmem{region}-ext4-dax")
    if mount_nova:
        system(f"sudo mkdir -p /mnt/pmem{region}-nova")
        system("sudo modprobe nova")
        system(f"sudo mount -t NOVA -o init  /dev/pmem0.2 /mnt/pmem{region}-nova")
    if mount_ext4 or mount_nova:
        system(f"sudo chmod a+w /mnt/pmem{region}-*")
        system(f"sudo mount -v | grep /pmem{region}")
        system(f"df -h")
    if unmount:
        system(f"sudo umount -l /mnt/pmem{region}-*")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--region", default="0", help="Region to operate on")
    parser.add_argument("--reformat_ns", action="store_true")
    parser.add_argument("--mount_ext4", action="store_true")
    parser.add_argument("--mount_nova", action="store_true")
    parser.add_argument("--unmount", action="store_true")
    check_any_args_passed(parser)
    args = parser.parse_args()
    logger.info(f"args={args}")
    main(**vars(args))
